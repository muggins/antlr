/** \file
 *  This OBJC source file was generated by $ANTLR version 3.3.1-SNAPSHOT Feb 17, 2011 19:42:20
 *
 *     -  From the grammar source file : /Users/acondit/source/antlr3/acondit_localhost/code/antlr/main/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g
 *     -                            On : 2011-02-17 21:34:40
 *     -           for the tree parser : PolyDifferentiatorTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2010 Alan Condit
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// $ANTLR 3.3.1-SNAPSHOT Feb 17, 2011 19:42:20 /Users/acondit/source/antlr3/acondit_localhost/code/antlr/main/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g 2011-02-17 21:34:40


/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#import "PolyDifferentiator.h"
/* ----------------------------------------- */


/* ============================================================================= */
/* =============================================================================
 * Start of recognizer
 */
#pragma mark Cyclic DFA implementation start DFA1
@implementation DFA1
const static NSInteger dfa1_eot[10] =
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static NSInteger dfa1_eof[10] =
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static unichar dfa1_min[10] =
    {4,0,2,0,0,0,5,6,0,0};
const static unichar dfa1_max[10] =
    {9,0,2,0,0,0,5,9,0,0};
const static NSInteger dfa1_accept[10] =
    {-1,1,-1,4,5,6,-1,-1,2,3};
const static NSInteger dfa1_special[10] =
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static NSInteger dfa1_transition[] = {};
const static NSInteger dfa1_transition0[] = {8, -1, -1, 9};
const static NSInteger dfa1_transition1[] = {6};
const static NSInteger dfa1_transition2[] = {2, 4, 5, -1, 1, 3};
const static NSInteger dfa1_transition3[] = {7};


+ (id) newDFA1WithRecognizer:(BaseRecognizer *)aRecognizer
{
    return [[[DFA1 alloc] initWithRecognizer:aRecognizer] retain];
}

- (id) initWithRecognizer:(BaseRecognizer *) theRecognizer
{
    if ((self = [super initWithRecognizer:theRecognizer]) != nil) {
        decisionNumber = 1;
        eot = dfa1_eot;
        eof = dfa1_eof;
        min = dfa1_min;
        max = dfa1_max;
        accept = dfa1_accept;
        special = dfa1_special;
        if (!(transition = calloc(10, sizeof(void*)))) {
            [self release];
            return nil;
        }
        len = 10;
        transition[0] = dfa1_transition2;
        transition[1] = dfa1_transition;
        transition[2] = dfa1_transition1;
        transition[3] = dfa1_transition;
        transition[4] = dfa1_transition;
        transition[5] = dfa1_transition;
        transition[6] = dfa1_transition3;
        transition[7] = dfa1_transition0;
        transition[8] = dfa1_transition;
        transition[9] = dfa1_transition;
    }
    return self;
}

- (void) dealloc
{
    free(transition);
    [super dealloc];
}

- (NSString *) description
{
    return @"10:1: poly : ( ^( '+' poly poly ) | ^( MULT INT ID ) -> INT | ^( MULT c= INT ^( '^' ID e= INT ) ) -> ^( MULT[@\"*\"] INT[c2] ^( '^' ID INT[e2] ) ) | ^( '^' ID e= INT ) -> ^( MULT[@\"*\"] INT[c2] ^( '^' ID INT[e2] ) ) | INT -> INT[@\"0\"] | ID -> INT[@\"1\"] );";
}


@end /* end DFA1 implementation */

#pragma mark Cyclic DFA implementation end DFA1



#pragma mark Bitsets
static ANTLRBitSet *FOLLOW_8_in_poly44;
static const unsigned long long FOLLOW_8_in_poly44_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_poly_in_poly46;
static const unsigned long long FOLLOW_poly_in_poly46_data[] = { 0x0000000000000370LL};
static ANTLRBitSet *FOLLOW_poly_in_poly48;
static const unsigned long long FOLLOW_poly_in_poly48_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_MULT_in_poly55;
static const unsigned long long FOLLOW_MULT_in_poly55_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_INT_in_poly57;
static const unsigned long long FOLLOW_INT_in_poly57_data[] = { 0x0000000000000040LL};
static ANTLRBitSet *FOLLOW_ID_in_poly59;
static const unsigned long long FOLLOW_ID_in_poly59_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_MULT_in_poly71;
static const unsigned long long FOLLOW_MULT_in_poly71_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_INT_in_poly75;
static const unsigned long long FOLLOW_INT_in_poly75_data[] = { 0x0000000000000200LL};
static ANTLRBitSet *FOLLOW_9_in_poly78;
static const unsigned long long FOLLOW_9_in_poly78_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_poly80;
static const unsigned long long FOLLOW_ID_in_poly80_data[] = { 0x0000000000000020LL};
static ANTLRBitSet *FOLLOW_INT_in_poly84;
static const unsigned long long FOLLOW_INT_in_poly84_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_9_in_poly122;
static const unsigned long long FOLLOW_9_in_poly122_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_poly124;
static const unsigned long long FOLLOW_ID_in_poly124_data[] = { 0x0000000000000020LL};
static ANTLRBitSet *FOLLOW_INT_in_poly128;
static const unsigned long long FOLLOW_INT_in_poly128_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INT_in_poly164;
static const unsigned long long FOLLOW_INT_in_poly164_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_poly178;
static const unsigned long long FOLLOW_ID_in_poly178_data[] = { 0x0000000000000002LL};


#pragma mark Dynamic Global Scopes

#pragma mark Dynamic Rule Scopes

#pragma mark Rule return scopes start
@implementation PolyDifferentiator_poly_return /* returnScope */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (PolyDifferentiator_poly_return *)newPolyDifferentiator_poly_return
{
    return [[[PolyDifferentiator_poly_return alloc] init] retain];
}

- (id) init
{
    if (self = [super init]) {
    }
    return self;
}

/* ASTTreeParser returnScope.methods */
- (CommonTree *)getTree
{
    return tree;
}

- (void) setTree:(CommonTree *)aTree
{
    if (tree != aTree) {
        if (tree != nil) [tree release];
        if (aTree != nil) [aTree retain];
        tree = aTree;
    }
}

- (void) dealloc
{
    [self setTree:nil];
    [super dealloc];
}




@end /* end of returnScope implementation */



@implementation PolyDifferentiator  // line 637

/* ObjC start of ruleAttributeScope */
#pragma mark Dynamic Rule Scopes
/* ObjC end of ruleAttributeScope */
#pragma mark global Attribute Scopes
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */
/* ObjC end actions.(actionScope).synthe